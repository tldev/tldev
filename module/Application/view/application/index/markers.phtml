<?php $this->inlineScript()->appendFile('//google-code-prettify.googlecode.com/svn/loader/run_prettify.js') ?>
<?php $this->inlineScript()->appendFile('//maps.googleapis.com/maps/api/js?v=3.exp&sensor=false') ?>
<div class="row">
    <div class="col-md-10 col-md-offset-1">
        <h2>Numbered Google Map Markers</h2>
        <p>
            I was recently given the task of adding ordered markers to a Google map.
            In this blog I'll show a few ways of skinning this cat.
        </p>
        <h3 class="lead">Using Google Charts API</h3>
        <p>
            It's possible to create custom pins using Google's Chart API.
            Once you figure out the correct URL for how you want the marker to look, it's
            as simple as just iterating over your array of locations, and passing the URL as
            the marker icon.  I used <a target="_blank" href="https://developers.google.com/chart/image/docs/gallery/dynamic_icons">this</a>
            site as a reference.
        </p>
<?php
$script = <<<SCRIPT
google.maps.event.addDomListener(window, 'load', function() {
    var map;
    var coords = [
        {
            'name': 'Manhattan',
            'lat': 40.783435,
            'long': -73.966249
        },
        {
            'name': 'Denver',
            'lat': 39.7392,
            'long': -104.9847
        }
    ];
    var mapOptions = {
        zoom: 4,
        center: new google.maps.LatLng(39.8282, -98.5795)
    };
    map = new google.maps.Map(document.getElementById('markers-chart-api'), mapOptions);
    for(var i = 0; i < coords.length; i++) {
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(coords[i].lat, coords[i].long),
            map: map,
            title: coords[i].name,
            icon: "https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=" + (i + 1) + "|FFFFFF|000000"
        });
    }
});
SCRIPT;
$this->inlineScript()->appendScript($script);
?>
        <pre class="prettyprint linenums"><code class="language-js"><?= htmlspecialchars($script) ?></code></pre>
        <div id="markers-chart-api" style="height:350px;"></div>
        <hr>
        <p>
            The above method works fairly well, but it doesn't allow for very customizable markers.  So, there's really
            two other solutions to this problem.  One option is to figure out how to programmatically generate pins with
            whatever language is used by the website, essentially creating an API for a very custom marker.  This could
            be achieved with libraries like
            <a target="_blank" href="http://www.php.net/manual/en/book.imagick.php">ImageMagick</a>. These are just some
            silly markers though, and unless this is a major feature of the site, taking the time to finesse a custom
            marker API is impractical, and really just unnecessary.
        </p>
        <p>
            The other option is to create custom image markers, host them from the site,
            and provide them as icon markers.  There's a right and wrong way of doing this.
        </p>
        <hr>
        <h3 class="lead">Using Individual Marker Images <i>(wrong way)</i></h3>
        <p>
            All that is needed are a couple custom created image markers.  Here are the two markers I whipped up in
            MS Paint: <a target="_blank" href="/img/marker1.png">Marker 1</a> and
            <a target="_blank" href="/img/marker2.png">Marker 2</a>.  It helps if the markers are named in such a way
            that will allow iterating.  This looks nearly identical to the previous method.
        </p>
<?php
$script = <<<SCRIPT
google.maps.event.addDomListener(window, 'load', function() {
    var map;
    var coords = [
        {
            'name': 'Manhattan',
            'lat': 40.783435,
            'long': -73.966249
        },
        {
            'name': 'Denver',
            'lat': 39.7392,
            'long': -104.9847
        }
    ];
    var mapOptions = {
        zoom: 4,
        center: new google.maps.LatLng(39.8282, -98.5795)
    };
    map = new google.maps.Map(document.getElementById('markers-custom-images'), mapOptions);
    for(var i = 0; i < coords.length; i++) {
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(coords[i].lat, coords[i].long),
            map: map,
            title: coords[i].name,
            icon: "/img/marker" + (i + 1) + ".png"
        });
    }
});
SCRIPT;
$this->inlineScript()->appendScript($script);
?>
        <pre class="prettyprint linenums"><code class="language-js"><?= htmlspecialchars($script) ?></code></pre>
        <div id="markers-custom-images" style="height:350px;"></div>
        <hr>
        <h3 class="lead">Using a Single Marker Image <i>(right way)</i></h3>
        <p>
            The correct way if Google's Chart API won't cut it is to create a sprite image of your markers, and use size
            and origin properties to display the correct marker. Here is my beautiful
            <a target="_blank" href="/img/marker_sprite.png">sprite</a>.

        </p>
        <?php
$script = <<<SCRIPT
google.maps.event.addDomListener(window, 'load', function() {
    var map;
    var coords = [
        {
            'name': 'Manhattan',
            'lat': 40.783435,
            'long': -73.966249
        },
        {
            'name': 'Denver',
            'lat': 39.7392,
            'long': -104.9847
        }
    ];
    var mapOptions = {
        zoom: 4,
        center: new google.maps.LatLng(39.8282, -98.5795)
    };
    map = new google.maps.Map(document.getElementById('markers-sprite'), mapOptions);
    for(var i = 0; i < coords.length; i++) {
        var icon = new google.maps.MarkerImage(
            "/img/marker_sprite.png",
            new google.maps.Size(182,27),
            new google.maps.Point(0, i * 27)
        );
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(coords[i].lat, coords[i].long),
            map: map,
            title: coords[i].name,
            icon: icon
        });
    }
});
SCRIPT;
$this->inlineScript()->appendScript($script);
?>
        <pre class="prettyprint linenums"><code class="language-js"><?= htmlspecialchars($script) ?></code></pre>
        <div id="markers-sprite" style="height:350px;"></div>
        <hr>
        <p>
            The last example shown above is preferred because it only causes 1 http request.  If dozens or even hundreds
            of numbered markers were needed, then dozens or hundreds of http requests would be needed to retrieve them.
            Instead, a sprite with every numbered marker is a very simple, quick, and clean solution.
        </p>
        <p>
            The ultimate end-all solution that would allow for an infinite number of numbered markers would be
            a combination of the last method, with a custom API that takes the number of icons needed as well as their
            dimensions. I might later do this as a proof of concept. If there's only ever going to be a maximum of 50
            or so markers though, it's easier and less headache to just generate a sprite and not worry about generating
            images backend.
        </p>
        <hr>
        <a target="_blank" href="https://github.com/tldev/tldev/blob/master/module/Application/view/application/index/markers.phtml">Check out this view on github!</a>
        <hr>
        <?= $this->disqus() ?>
    </div>
</div>
